# -*- coding: utf-8 -*-
"""ass1_supervised.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OgjxuZHrFPCUuj9_PoP3xlgfm86KuBU1
"""

from keras.datasets import mnist
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

def centroid(image,width,height):
  feature_vector = []
  lx1 = 0
  ly1 = 0
  lx2 = 0
  ly2 = 0
  for x in range(4):
    if x == 0:
      lx1 = ly1 = 0
      lx2 = ly2 = 14
    elif x == 1:
      lx1 = 14
      lx2 = 28
      ly1 = 0
      ly2 = 14
    elif x == 2:
      lx1 = 0
      lx2 = 14
      ly1 = 14
      ly2 = 28
    else :
      lx1 = ly1 = 14
      lx2 = ly2 = 28
    sum_of_x = 0
    sum_of_y = 0
    total_pixels = 0
    for i in range(lx1,lx2):
      for j in range(ly1,ly2):
        sum_of_x = sum_of_x + (i-lx1)*image[i][j]
        sum_of_y = sum_of_y + (j-ly1)*image[i][j]
        total_pixels = total_pixels+image[i][j]
    if total_pixels != 0:
      feature_vector.append((sum_of_x/total_pixels))
      feature_vector.append((sum_of_y/total_pixels))
    else:
      feature_vector.append(0)
      feature_vector.append(0)
  return feature_vector


(train_X, train_y), (test_X, test_y) =mnist.load_data()
print ('X_train: ' + str(train_X.shape))
print ('Y_train: ' + str(train_y.shape))
print ('X_test: ' + str(test_X.shape))
print ('Y_test: ' + str(test_y.shape))

train_features = []
test_features = []

for i in range(10000):
  train_features.append(centroid(train_X[i],28,28))

for i in range(1000):
  test_features.append(centroid(test_X[i],28,28))
    
knn_Classifier = KNeighborsClassifier(n_neighbors=3)
knn_Classifier.fit(train_features,train_y[:10000])
predicted_y1 = knn_Classifier.predict(test_features)
print("Accuracy of knn Classifier: "+str(accuracy_score(test_y[:1000], predicted_y1)))